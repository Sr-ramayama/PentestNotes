{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Obsidian Notes","text":"<p>Publish your public notes with MkDocs</p>"},{"location":"#hello-world","title":"Hello World!","text":"<p>The <code>index.md</code> in the <code>/docs</code> folder is the homepage you see here.</p> <p>The folders in <code>/docs</code> appear as the main sections on the navigation bar.</p> <p>The notes appear as pages within these sections. For example, Note 1 in <code>Topic 1</code></p>"},{"location":"Cracking/John%20the%20Ripper/","title":"John the Ripper","text":""},{"location":"Cracking/John%20the%20Ripper/#description","title":"Description","text":"<p>John the Ripper is a fast password cracker, currently available for many flavors of Unix, macOS, Windows, DOS, BeOS, and OpenVMS (the latter requires a contributed patch). Its primary purpose is to detect weak Unix passwords. Besides several crypt(3) password hash types most commonly found on various Unix flavors, supported out of the box are Kerberos/AFS and Windows LM hashes, as well as DES-based tripcodes, plus hundreds of additional hashes and ciphers in \"-jumbo\" versions.</p>"},{"location":"Cracking/John%20the%20Ripper/#use","title":"Use","text":""},{"location":"Cracking/John%20the%20Ripper/#hash-cracking","title":"Hash Cracking","text":"<p>In order to crack a hash we first need it be stored in a file like a .txt file (Everyday). When that's ready we will head to the cracking.</p> <p><code>john -w=/usr/share/wordlists/rockyou.txt hash.txt</code></p> <p>if later on we want to see if the password is cracked ( it will be outputted when it's ready) we can use something to show the hash password:</p> <p><code>john --show hash.txt</code></p>"},{"location":"DBs/MONGODB/","title":"Description","text":"<p>MongoDB is an open source NoSQL database management program. NoSQL (Not only SQL) is used as an alternative to traditional relational databases</p>"},{"location":"DBs/MONGODB/#use","title":"Use","text":"<p>some useful commands to move around mongodb </p> <p>To connect </p> <p><code>mongo -h IP</code></p> <p>To show databases</p> <p><code>show dbs</code></p> <p>To show collections</p> <p><code>show collections</code></p> <p>To use a DB</p> <p><code>use DB</code></p>"},{"location":"Desktop/XFREERDP/","title":"Description","text":"<p>XFREERDP is a linux tool that let's us connect to RDP</p>"},{"location":"Desktop/XFREERDP/#use","title":"Use","text":"<p>In order to connect to a RDP host </p> <p><code>xfreerdp /u:USER /v:IP</code></p>"},{"location":"Enumeration/GOBUSTER/","title":"GOBUSTER","text":""},{"location":"Enumeration/GOBUSTER/#description","title":"Description","text":"<p>gobuster is a usefull directory and subdomain brute forcing tool that enables us to explore the different files and subdomains present in a webserver</p>"},{"location":"Enumeration/GOBUSTER/#use","title":"Use","text":""},{"location":"Enumeration/GOBUSTER/#directory-mode","title":"Directory Mode","text":"<p>To be able to list all the directories in a web server we will do the following</p> <p><code>gobuster dir -u http://IP -w\u00a0 /usr/share/wordlists/dirb/common.txt</code></p>"},{"location":"Enumeration/GOBUSTER/#vhost-subdomain-mode","title":"Vhost (subdomain) Mode","text":"<p>Whenever we want to look for subdomains present in a webserver we will use this mode</p> <p><code>gobuster vhost -u http://IP --append-domain -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt</code></p> <p>There are many lists available in the system. Just use locate to find them. Seclists</p>"},{"location":"Enumeration/WFUZZ/","title":"WFUZZ","text":""},{"location":"Enumeration/WFUZZ/#description","title":"Description","text":"<p>As GOBUSTER wfuzz is another directory brute forcing tool that enables us to discover all the directories or subdomains present in a webserver. It will replace the word FUZZ in the instruction with the given word list.</p>"},{"location":"Enumeration/WFUZZ/#use","title":"Use","text":""},{"location":"Enumeration/WFUZZ/#directory-mode","title":"directory Mode","text":"<p>As we did with GOBUSTER, we will enumerate the directories in a webserver but hiding every directory that results in a  404  error</p> <p><code>wfuzz -c -w /usr/share/wordlists/dirb/common.txt --hc 404 https://domain/FUZZ</code></p>"},{"location":"Enumeration/WFUZZ/#subdomain-mode","title":"Subdomain Mode","text":"<p>In a complex manner, we will use this command to enumerate all the subdomains present in a webserver.</p> <p><code>wfuzz -c -w top5000.txt -u 'http://target.tld' -H \"Host: FUZZ.target.tld\"</code></p> <p>But, if it keeps printing  200 OK  you may want to check the Word field meaning that whenever every try it's accepted, it's common to have a page with an error message so, it get's a response and prints a  200 OK  but the word count is very repeated over and over so we can filter those and just focus on the real positive findings . hw (hide words) hc(hide codes)</p> <p><code>wfuzz -c -w top5000.txt -u 'http://target.tld' -H \"Host: FUZZ.target.tld\" -hw WCOUNT</code></p> <p>see image for more detail:</p> <p></p>"},{"location":"Features/LaTeX%20Math%20Support/","title":"LaTeX Math Support","text":"<p>LaTeX math is supported using MathJax.</p> <p>Inline math looks like \\(f(x) = x^2\\). The input for this is <code>$f(x) = x^2$</code>. Use <code>$...$</code>.</p> <p>For a block of math, use <code>$$...$$</code> on separate lines</p> <pre><code>$$\nF(x) = \\int^a_b \\frac{1}{2}x^4\n$$\n</code></pre> <p>gives </p> \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]"},{"location":"Features/Mermaid%20Diagrams/","title":"Mermaid diagrams","text":"<p>Here's the example from MkDocs Material documentation: </p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"Features/Text%20Formatting/","title":"Text Formatting","text":"<p>You can have lists like this</p> <ul> <li>first</li> <li>second</li> <li>third</li> </ul> <p>Or checklist lists to</p> <ul> <li> Get</li> <li> things</li> <li> done</li> </ul> <p>Also, get highlights and strikethroughs as above (similar to Obsidian).</p> <p>More formatting options for your webpage here. (but not compatible with Obsidian)</p>"},{"location":"Misc/Everyday/","title":"Everyday","text":"<p><code>echo &lt;smthng&gt; &gt; hash.txt</code></p>"},{"location":"Misc/Seclists/","title":"Seclists","text":"<p>Location of the common wordlists:</p> <p>/usr/share/wordlists/rockyou.txt</p> <p>/usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt</p> <p>if you don't find them :</p> <p><code>locate &lt;name&gt;</code></p>"},{"location":"Misc/Shell%20Fix/","title":"Description","text":"<p>Whenever a  victims shell doesn't let you use Control+C we can consider it \"broken\" and, as quality of live we can fix the shell to be able to work as a normal XTERM</p> <pre><code>python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n</code></pre> <p>either the upper one or the next </p> <pre><code>python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n</code></pre> <p>We shall send the shell to background (in our machine)</p> <p>In order to send it to background -&gt;  control+Z</p> <pre><code>ssty raw -echo; fg\n</code></pre> <p>We try if we can use  control+C and we export the parameters from xterm and be able to use  control+L</p> <pre><code>export TERM=xterm\n</code></pre> <p>Check  attacker attacker window size </p> <pre><code>stty size\n</code></pre> <p>and  victims </p> <pre><code>stty rows x columns x\n</code></pre>"},{"location":"Monitor%20-%20Scanning/NMAP/","title":"NMAP","text":"<p>{ width=\"656\"; height=\"380\" }</p>"},{"location":"Monitor%20-%20Scanning/NMAP/#description","title":"Description","text":"<p>We will always use it at the early stage of a pentest to gather information about open ports and exposed services.</p>"},{"location":"Monitor%20-%20Scanning/NMAP/#use","title":"Use","text":"<p><code>sudo nmap --min-rate 5000 -sCVS -sS -Pn -p- -vvv -r</code></p>"},{"location":"Monitor%20-%20Scanning/PSPY/","title":"PSPY","text":""},{"location":"Monitor%20-%20Scanning/PSPY/#description","title":"Description","text":"<p>Pspy will let us to monitor executed instructions in a victims machine. We do this to maybe discern any recursive instruction that could be made by the user with a possible vulnerability or any process that could lead to any privilege escalation.</p>"},{"location":"Monitor%20-%20Scanning/PSPY/#use","title":"Use","text":"<p>Firstly we need to download the pspy64 script (already in my kali)</p> <p><code>wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.1/pspy64</code></p> <p>We will serve it with out http server (add reference)</p> <p>In the victim machine we will give it execution permissions to the user and then execute it (recommended in a separate tab)</p> <pre><code>chmod u+x pspy64\n./pspy64\n</code></pre>"},{"location":"PrivEsc/CHMOD/","title":"CHMOD","text":"<p>Add priviledges SUID to the bash  <code>chmod u+s /bin/bash</code></p> <p>access as owner  <code>/bin/bash -p</code></p>"},{"location":"PrivEsc/Linpeas/","title":"Linpeas","text":""},{"location":"PrivEsc/Linpeas/#description","title":"Description","text":"<p>LinPEAS is a script that search for possible paths to escalate privileges on Linux/Unix*/MacOS hosts. The checks are explained on\u00a0book.hacktricks.xyz</p> <p>More in : linkpeas</p>"},{"location":"PrivEsc/Linpeas/#use","title":"Use","text":"<p>We will serve it with a HTTP server HTTP to the victims machine.</p> <p>Later on we will use chmod to give exec permissions to the .sh file:</p> <p><code>chmod u+x linpeas.sh</code></p> <p>after that, we will launch the script and wait for the output.</p> <p><code>./linpeas.sh</code></p>"},{"location":"SMB/SMBCLIENT/","title":"Description","text":"<p>smbclient is commonly used in\u00a0network administration tasks, such as transferring files between Windows and Linux systems or backing up files from Windows servers. It can also be used in scripting and automation tasks to perform operations on remote SMB/CIFS resources.</p>"},{"location":"SMB/SMBCLIENT/#use","title":"Use","text":"<p>Connect <code>smbclient -N \\\\\\\\IP</code></p> <p>Access Share</p> <p><code>smbclient -N \\\\\\\\IP\\\\Share</code></p> <p>List Shares</p> <p><code>smbclient -N -L \\\\\\\\IP</code></p>"},{"location":"Servers/HTTP/","title":"Use","text":"<p>we will use an HTTP server to be able to serve files to the victims VM (recommended to launch it in the folder with the servings).</p> <p><code>sudo python3 -m http.server 80</code></p>"},{"location":"Servers/NETCAT/","title":"Use","text":"<p>Used to get a reverse shell or output from a command to your IP <code>netcat -nlvp 4444</code></p>"},{"location":"Topic%201/Note%201/","title":"Note 1","text":"<p>Example: link to Mermaid Diagrams under <code>Features</code></p>"},{"location":"Topic%201/Note%202/","title":"Note 2","text":""}]}